Object类型
    创建方式
        var person = new Object()
        对象字面量表示 
            var person = {name: 'person'}
            属性名 可以是 name 'name' "name"

            必须用引号包含起来的情况
                如果属性名是JS的保留字 
                属性名包含 除 字母 数字 下划线 $之外的特殊字符
                属性名以数字开头
                
                访问通过Object[propertyName] 访问
Array类型
    创建方式
        new Array() === Array()
            参数 n 为数字  创建一个长度为n的数组
            参数为具体的内容 a,b,c 创建一个[a, b, c]

        var arr = []
        错误写法
            var arr = [1, 2, , ] //创建长度为2 或 4 的数组

    检测数组
        Array.isArray(arr) 支持IE9+

    转换方法
        arr.join('') 
        // null undefined在join()被转成 ''

    栈方法
        LIFO(Last-In-First-Out 后进先出)
        
        push方法
            参数 可以是任意项
            返回值 修改后的数组长度

            var arr = []
            arr.push('A', 'B', 'C') // return 3

        pop方法
            获取数组的最后一项

            var item = arr.pop() // 返回值就是数组最后一个元素

    队列方法
        先进先出（First-In-First-Out）

        shift 方法
        var item = arr.shift() // 返回数组第一项

        unshift 方法 与push方法雷同
            var colors = []
            var count = colors.unshift('A','B') // 返回2

    重排序方法
        reverse 重排当前数组
        sort 重排当前数组

    操作方法
        concat方法
            合并两个数组 也可用作copy一个数组
        slice
            基于当前数组的一项或多项创建一个新数组 不改变当前数组

            var arr = [1, 2, 3, 4, 5, 6]
            var arr1 = arr.slice(1, 4) // [2, 3, 4]
            var arr2 = arr.slice(3) // [4, 5, 6]
            var arr3 = arr.slice(-5, -2) //  [2, 3, 4]
            负值 = length - 负值
            如果start > end 返回空数组

        splice
            两个参数
                var colors = ['red', 'green', 'black', 'pink', 'purpue']
                colors.splice(2, 1) // 从数组第二位开始 截取一个 返回当前项所构成的一个数组 改变原数组
                // 2 数组的第二位开始 1 长度是一 截取 构成返回数组 （如果 截取长度是0 返回空数组）
            多参数
                colors.splice(2, 1, 'pink', 'yellow') 
                // 把数组第二项开始 长度是一的项替换成 pink 和 yellow
                // 返回值 是 截取的元素

    位置方法
        indexOf
            查找数组的中 某项的位置 找不到返回-1 
            参数
                第一个 所要找的项
                第二个 开始找的位置

                var colors = ["red", "green", "pink", "yellow", "pink", "yellow", "purpue"]
                colors.indexOf('pink') // 2
                colors.indexOf('pink', 3) // 4

        lastIndexOf()
            参数同上
                返回顺序是按照正序排列的顺序值
                第二个参数 是倒序顺序开始查找

    迭代方法
        every
            数组的每一个元素都符合条件 返回true 否则false
            var arr = [2,3,4,5,'6']
            var isNumber = arr.every((item, index, arr) => {
                console.log(index, item, arr) // 索引 当前项 当前数组
                return typeof item === 'number'
            })
            isNumber // false
        some
            数组的任意一个元素符合条件 返回true 否则false

            var arr = [2,3,4,5,'6']
            var hasString = arr.some((item, index, arr) => {
                return typeof item === 'string' 
            })
            hasString // true
        filter
            过滤一个数组 返回符合条件的选项 
            var arr = [2,3,4,5,'6']
            var strArr = arr.filter((item, index, arr) => {
                return typeof item === 'string'
            })

            strArr // ['6']
        map
            对数组的所有元素进行遍历 可以做操作
            可以返回一个二位数组

            var arr = [1,2,3,4,5]
            var newArr = arr.map((item, index, arr) => {
                return item * 2
            })
        forEach
            没有返回值

    递归方法
        reduce
            两个参数 func initVal
                func 在每项上调用的函数
                    接收四个参数 prev cur index 数组对象
                initVal 项目开始的初始值

        可以按照一定规律操作数组变为对象之类的操作
        求和
            var result = [
                {
                    subject: 'math',
                    score: 88
                },
                {
                    subject: 'chinese',
                    score: 95
                },
                {
                    subject: 'english',
                    score: 80
                }
            ]
            var strategies = {
                'math': .5,
                'chinese': .3,
                'english': .2
            }
            // 求权重分
            var averageScore = result.reduce((prev, cur, index, arr) => {
                return prev + cur.score * strategies[cur.subject]
            }, 0)

            // 查找数组中出西现次数最多的字
            var str = 'sfasasdfafkjaekfjasdkfasjdklfasdf';

Date类型
    略（暂时跳过）
RegExp类型
    （暂时跳过）
    var expression = / pattern / flags
    flags 标志
        i 不区分大小写
        m 多行模式 在达到一行文本末尾 仍然可以继续查找
        g 全局模式 改模式将适用于所有字符串 而非遇到第一个匹配结果后立即返回


    元字符

Function类型
    
基本包装类型
    Boolean Number String
    每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型对象，从而能让我们访问他的一些方法

    例子
        var s = 'something'
        s.toUpperCase()
        
    实际过程
        创建一个String实例
        在这个实例上调用指定方法
        销毁这个对象
    对应实际过程代码
        var s1 = new String('something')
        var s  = s1.toUpperCase()
        s1 = null
    此解析同样适用于 Number Boolean

    问题：
        1.toFixed()为什么会报错，1..toFixed()不会报错？
        此解析为倒推模式，不靠谱
        首先Number类型也适用上面的分析结果，然后现在的问题就是 为什么1点toFixed会报错，1点点toFixed不会报错？
        因为在数字类型中 点 是有一定含义的 浏览器会解析为一个浮点数 所以会向后去匹配一个数字 结果是一个字母所以报错
        而1.. 第一个点会认为是浮点类型 第二个点会认为是访问1这个包装类的一个方法













