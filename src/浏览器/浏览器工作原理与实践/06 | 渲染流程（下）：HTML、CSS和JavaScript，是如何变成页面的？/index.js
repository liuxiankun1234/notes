/**
 * 还是不太理解渲染引擎是如何按照上下文分配图层的?????
 * 
 *  06 | 渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？
 *      分层(图层树)
 *          布局树生成完成，节点坐标位置计算完成，接下来生成图层树
 *          为什么要生成图层树？
 *              页面中有很多复杂的交互效果，一些复杂的3D变换、页面滚动、或者使用z-index做z轴排序等，为了更
 *              方便实现这些效果，渲染引擎为特定的节点生成专用图层，并生成一颗对应的图层树
 *          通常并不是布局树的每个节点都生成一个layer，如果对应的节点没有layer，那么节点从属于父节点的layer
 *          满足什么条件，渲染引擎才会为特定的节点创建新的layer呢？
 *              拥有层叠上下文属性的元素会被提升单独的一层（层叠上下文解析见 E1 ）
 *              需要剪裁（clip）的地方也会被创建为图层
 *      图层绘制（输出绘制列表）
 *          渲染引擎会将图层绘制切分成很多小的绘制指令，将这些指令绘制成一个待绘制列表
 *          chrome->layer->层->Profiler可以拖动进度条重现列表的绘制过程  
 *          完成图层树的构建，渲染引擎会对图层树进行绘制        
 *      栅格化操作(raster)
 *          
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *  
**/

/**
 *  
 *  E1：
 *  层叠上下文是什么？
 *      假定用户面向浏览器网页，而HTML元素沿着其相对于用户的一条虚拟的z轴排开，层叠上下文就是对这些HTML元素的一个三维构想
 *      众HTML元素基于元素属性按照优先级占据空间
 *  形成层叠上下文条件
 *      文档根元素html
 *      position值为absolute/relative,z-index值不为auto的元素
 *      position值为fixed/sticky
 *      flex/grid容器的子元素，且z-index值不为auto
 *      opacity值小于1的元素
 *      以下任意属性值不为none的元素
 *          transform 
 *          filter  
 *          perspective 
 *          clip-path  
 *          mask/mask-image/mask-border 
 *      -webkit-overflow-scrolling值为touch
 *  
 *  层叠上下文总结：
 *      层叠上下文可以包含在其他层叠上下文中，并且一起创建一个层叠上下文的层级
 *      每个层叠上下文都完全独立于他的兄弟元素，当处理层叠时值考虑子元素
 *      每个层叠上下文都是自包含的：当一个元素的内容发生层叠后，该元素将作为整体在父级层叠上下文中按顺序进行层叠
**/