/**
 *  22 | DOM树：JavaScript是如何影响DOM树构建的？
 *      JS文件的下载会阻塞DOM树的解析
 *          优化
 *              Chrome浏览器内部优化，预解析操作。当渲染引擎接受字节流之后，会开启一个预解析线程，用来分析html是否包含JS、CSS文件，预解析文件会提前下载这些文件
 *              CDN加速JS文件的加载
 *              压缩JS的体积
 *              JS代码中没有操作DOM相关代码，可以设置为defer/async
 *                  async：脚本文件一旦加载完成就立即执行,不管JS文件引入顺序
 *                  defer：DOMContentLoaded事件之前执行，按照顺序执行引入的JS文件
 *      什么是DOM？
 *          网络传给渲染引擎的HTML文件字节流是无法直接被渲染引擎渲染的，需要将其解析成渲染引擎可以理解的内部结构，这个就是DOM
 *          DOM有三个层面作用
 *              从页面视角看DOM是生成页面的基础数据结构
 *              从JS视角看，DOM提供给JS脚本操作的接口，通过这套接口，JS可以对DOM结构进行访问，从而改变文档的结构、样式和内容
 *              从安全视角来看，DOM是一道安全防护线，一些不安全的内容在DOM解析阶段就被拒之门外了
 *      DOM树是如何生成的？
 *          HTML解释器
 *              将HTML字节流转换成DOM结构
 *          网络进程加载多少HTML字节流，HTML解释器就解析多少字节
 *          代码从网络传输过来是以字节流的形式，那么字节流如何转成DOM的呢？图 ./i/字节流转换为 DOM.png
 *              第一阶段 通过分词器将字节流转成Token 图 ../i/生成的 Token 示意图.png
 *              第二阶段 和 第三阶段同步进行
 *              第二阶段 将Token解析为DOM节点
 *              第三阶段 将DOM节点添加到DOM树中 
 *          HTML解释器工作时，会默认创建一个根为document的空结构
 *      JS是如何影响DOM生成的？
 *          遇到JS脚本，HTML解析器会停止DOM解析，因为JS脚本可能要修改当前生成的DOM树结构
 *          在执行JS之前，需要先解析JS语句上的所有CSS样式文件下载完成并生成styleSheets，才能执行脚本
 *          
 *           
 * 
 * 
 * 
 * 
 * 
**/