/**
 *  第二章 URL与资源
 *      URL是因特网资源的标准化名称。URL统一的命令了互联网上的所有资源
 *      URL指向一条电子信息片段，告诉你他们位于何处、以及如何与之进行交互
 *      浏览因特网资源
 *          URL是浏览器寻找信息时所需的资源位置（等同于淘宝上的购物地址）
 *          URI通用的资源标识符，主要有两个子集
 *              URL 通过描述资源的位置来标识资源      
 *              URN 通过名字来标识资源，与他们当前所处的位置无关
 *          HTTP规范将更通用的概念URI作为其资源标识符，HTTP应用程序处理的只是URI的URL子集
 *      URL的语法
 *          URL提供了一种定位因特网上任意资源的手段，但是这些资源是可以通过各种不同的方案（HTTP、FTP、SMTP）来访问的，因此URL语法会随方案的不同而有所不同
 *          大部分URL都遵循通用的URL语法，而不同的URL方案的风格和语法都有不少重叠
 *          大多数URL方案的URL语法都建立在这个由9部分构成的通用格式上
 *              <scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>
 *              URL中最重要的三个部分 方案(scheme) 主机(host) 路径(path)
 *              组件            描述
 *              方案        访问服务器以获取资源时要使用哪种协议
 *              用户        某些方案访问资源时需要用户名
 *              密码        用户名后面可能包含密码，中间由冒号分隔
 *              主机        资源宿主服务器的主机名或者点分IP地址
 *              端口        资源宿主服务器正在监听的端口号。HTTP默认端口 80
 *              路径        服务器上资源的本地名，由斜杠将其与前面隔离
 *              参数        某些方案会用这个组件来指定输入参数。参数为名=值对。可以包含多个参数用分号分隔
 *              查询        某些方案会用这个组件传递参数以激活应用程序（比如数据库、公告板、搜索引擎）。查询组件的内容没有通用格式，用问号将其与URL其余部分分隔开
 *              片段        一小片或一部分资源的名称，引用对象时不会将frag字段传送给服务器；这个字段是客户端内部使用的。通过井号与其他URL分隔开来
 *          方案--使用什么协议
 *              方案实际上是规定如何访问指定资源的主要标识符，它会告诉负责解析URL的应用程序应该使用什么协议
 *              方案协议必须以一个字母符号开始，由第一个:将其与URL的其余部分分隔开
 *              方案名不区分大小写
 *          主机与端口
 *              主机名可以是域名或者IP 标识了应用程序在互联网上的哪台服务器上
 *              端口组价标识了服务器正在监听的网络端口
 *                  对下层使用TCP协议的HTTP来说，默认端口号为80
 *          用户名和密码
 *              很多服务器都需要输入用户名和密码才能允许用户访问数据。FTP就是常见的实例
 *                  ftp://ftp.prep.ai.mit.edu/pub/gnu
 *                  ftp://anonymous@ftp.prep.ai.mit.edu/pub/gnu
 *                  ftp://anonymous:my_password@ftp.prep.ai.mit.edu/pub/gnu
 *              第一个例子没有用户名和密码组件，只有标准的方案、主机和路径。如果某些应用程序使用的URL方案要求输入用户名和密码，比如FTP，但是用户没有提供，它通常会插入一个默认的用户名和密码，
 *              比如，如果向浏览器提供一个FTP URL，但是没有指定的用户名和密码，他就会插入一个anonymous（匿名用户）作为你的用户名，并发送一个默认的密码（IE会发送IEUser，Netscape Navigator则会发送mozilla）
 *              第二个例子显示了一个指定的anonymous用户名。
 *              第三个例子提供了一个指定的anonymous用户名和密码两者间由':'分隔
 *          路径
 *              URL路径说明了资源位于服务器的什么位置，路径通常像一个分级的文件系统路径
 *              每个路径都有自己的参数组件
 *          参数组件
 *              URL组件可以分为若干路径，每段路径都有可能有自己的参数
 *              参数为名值对，用'='连接，每个参数对之间用';'分隔
 *              参数为应用程序提供了访问资源所需的所有附加信息
 *              http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
 *          查询
 *              很多资源，可以通过提问题或者进行查询来缩小请求资源类型的范围
 *              查询为名值对，用'='连接，每个查询对之间用'&'分隔
 *              例
 *                  http://www.joes-hardware.com/inventory-check.cgi?id=12721
 *                  可以通过指定的查询组件 针对特定的单品进行查询
 *          片段
 *              HTTP服务器通常处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。
 *              浏览器从服务器获得整个资源后，会根据片段来显示你感兴趣的那部分资源
 *      URL快捷方式
 *          相对URL     
 *              要从相对URL中获取访问资源所需的全部信息，就必须相对于另一个基础的URL进行解析
 *              基础的URL可以提供方案、主机、端口
 *              在HTML文档中使用相对路径是合法的
 *              有一套算法支撑相对URL转换成绝对路径
 *      令人头痛的字符
 *          URL是可移植的。他要统一地命名因特网上所有的资源，这也就意味着要通过各种不同的协议来传送这些资源。这些协议在传输数据时都会使用不同的机制，所以设计URL，使其可以通过任意因特网协议安全地传输很重要
 *          安全传输意味着URL的传输不能丢失信息。有些协议，比如传输电子邮件的简单邮件传输协议所使用的传输方法就会剥去一些特定的字符，为了避免这些问题，URL只能使用一些相对较小的，通用的安全字母表中的字符
 *          除了希望URL可以被因特网协议进行传送之外，设计者们还希望URL也可以供人类阅读，因此，即使不可见，不可打印的字符能够穿过邮件程序，从而成为可移植的，也不能在URL中使用
 *          URL还得是完整的。URL的设计者们认识到有时候人们可能希望URL中包含除通用的安全字母表之外的二进制数据或字符。因此，需要一种转义机制，能够将不安全的字符编码转为安全地字符编码，再进行传输
 *          URL字符集
 *              默认计算机系统字符通常都倾向于以英语为中心，历史上看很多计算机应用程序使用的都是US-ASCII字符集
 *              设计者将 转义序列集成进US-ASCII字符集，通过转义序列，就可以用US-ASCII字符集的有限子集对任意字符值或数据进行编码了，来实现可移植性和完整性
 *          编码机制
 *              为了避开安全字符集表示法带来的限制机制，人们设计了编码机制，用来在URL中表示各种不安全的字符。
 *              这种编码机制就是通过一种转义表示法来表示不安全字符的，这种转移表示法包含一个%，后面跟着一个表示字符ASCII码的十六进制数
 *              encodeURLComponent()
 *              ~  ASCII码 126(0x74)    encodeURLComponent('~') --> %7E
 *          字符限制
 *              
 *              
 *              
 *              
 *              
 *          
 *             
 *      unicode码和ASCII字符集关系？
 *          https://www.zhihu.com/question/57461614
 *  
 * 
 * 
 * 
 * 
 * 
*/