引用地址：https://timothygu.me/es-howto/#algorithm-steps

如何读ECMAScript 规范
    摘要
        ES规范是一个好的资源去学习JS工作原理，但是第一次阅读会感觉恐惧和困惑，本文能让文档读起来更容易
    1 前奏
        所以你已经决定每天读一点ES规范对你的身心是有好处的，也许这是一个新年决定，或许是一个药房，不论怎样，欢迎登机
        1.1 为什么我们应该读ES规范
            ES规范是权威的资源针对所有的JS实现行为来说，无论是在浏览器、Node服务端、物理机上，所有的JS引擎开发者都依赖于ES规范来让他们实现的新功能
            能够预期的工作，像其他JS引擎一样
            该规范的实用性超出了一种叫‘JS引擎开发者’的神秘的生物，事实上，该文档对你是有用的，你还没有意思到
            假定有一天你在工作中发现了一些如下奇怪的问题，为什么有的原型方法工作，有的原型方法不工作，谷歌不能给你答案
                Array.prototype.push(42) // 1
                Array.prototype // [ 42 ]
                Array.isArray(Array.prototype) // true
                Set.prototype.add(42)
                TypeError: Method Set.prototype.add called on incompatible receiver #<Set>
                    at Set.add (<anonymous>)
                Set.prototype
                Set {}
            读ES规范可以帮助到你
            另一方面，不建议新手阅读规范，如果你是刚接触JavaScript，多围绕Web，制作几个web app或者是基于js的东西，当你有足够多的JS经验的时候再回头读这个规范
            现在，你知道了ES规范是一个有用的工具来帮助你理解这个语言的复杂性，但是ES规范可以确切的包含什么内容呢
        1.2 ES语言规范包含什么，不包含什么
            笔者的答案是 ES规范包含语言特性，但是这么说好像又什么都没说，好像在说JS特性就是JS，我不是在重复
            相反的，我将罗列一些在开发JS应用时经常看到的一些东西，来告诉你他们中的哪一个是ES语言规范，哪一个不是
                ES语言规范包含
                    句法元素(什么鬼)        for-in循环    
                    语言学的元素(什么鬼)      typeof or {a: '1'}
                    内置对象        Object, Array, Function, Number, Math, RegExp, Proxy, Map, Promise, ArrayBuffer, Uint8Array, globalThis...
                不包含
                    console, setTimeout(), setInterval(), clearTimeout(), clearInterval()
                    Buffer, process, global*
                    module, exports, require(), __dirname, __filename
                    window, alert(), confirm(), the DOM (document, HTMLElement, addEventListener(), Worker, ...)
        1.3 在进一步讨论前，ES规范在哪
            当你Google"ECMAScript specification"时候，你可以看到许多结果，都声称自己是合法的规范，我们应该读哪一个呢？
            https://tc39.es/ecma262 定义的规范是你更想要的          
            长版本
                ES规范被一群来自不同背景的人开发，这群人被称为ECMA国际技术委员会39(简称TC39)，TC39委会最新的ES规范在tc39.es
        1.4 规范导航
            ES规范讨论相当多的内容。尽管作者们尝试将他们分成单独的内容，但是仍然很大
            作者本人更愿意按照五部分来划分规范，但是规范不是这么组织文档的，相反，文档将第一点惯例和基础放在了第五章到第九章，接下来三点
            放在了第十章到第十五章，APIS放在了第18章到第26章
                惯例和基础  
                    什么是一个Number
                    throw a TypeError 是什么意思
                语言的语法产生式
                    如何去写一个for-in循环
                语言的静态语义
                    在var语句中如何确定变量名
                语言的运行时语义
                    for-in循环是如何执行的
                apis文档
                    String.prototype.substring这个方法是做什么的
            我想说绝对没有人从上到下读文档，大部分人都是根据问题去定位文档段落去读，你应该先知道你想找的问题归属于上面五个模块中的哪一个，如果你不知道你遇到的问题属于哪一个模块，
            问自己一个问题’它（无论你想确认什么）是在什么时间评估的‘也许能帮助你，不要担心，规范导航将让你的实践更容易
    2 运行时语义
        规范中最大的部分是语言的运行时语义和apis文档，通常人们最关心的问题
        总的来说，读这些文档模块是相当简单的，文档使用了许多让人刚开始感觉恶心的速记，我尝试去解释这些惯例，然后应用他们在正常的工作中，并搞清楚下面这几件事是如何工作的
        2.1 算法步骤
            在JS中的大多数运行时语义是一系列详细的算法步骤，与伪代码不同算法步骤的形式更精确
            example 1
            a sample set of algorithm steps are:
                1 let a be 1
                2 let b be a + a
                3 if b is 2, then
                    1.Hooray! 
                4 Else
                    1.Boo!
        2.2 抽象操作
            有时候在规范中你能看到一个类似函数的东西被执行，Boolean()函数的第一步是：
                When Boolean is called width argument value, the fllowing steps are taken:
                    1 Let b be !ToBoolean(value).
                    2
            这个ToBoolean函数被执行作为一个抽象操作，他是抽象的因为在JS代码中没有确切的代码来表示。作者发明他们可以让作者不在重复写同样的东西，仅简单的标记即可
        2.3 [[This]]是个啥
            有时候，你能看到[[notation]]被使用像'Let proto be obj.[[Prototype]]'。这个标记在他出现的不同上下文中表示不同的情况，你需要花费大量的时间和精力去理解这种标识法，这种标识表示
            不能通过JS代码观察到的内部属性
            明显的它可以包含三种不同的情况，我将用规范中的例子来说明
            2.3.1 A field of a Record
                ES规范使用term Record来指代一组键值对映射-有点像c语言,每一个Record的键值对被叫做field。因为Record仅能出现在规范中，不能在真实的代码中,因此使用[[notation]]来
                指代 field of Record是有道理的
                example 2
                