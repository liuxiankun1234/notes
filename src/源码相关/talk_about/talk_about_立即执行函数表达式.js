import _ from 'underscore'
(function() {
    /**
     *  链接 http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/#introduction
     *  链接 https://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html
     * 
     *  读书笔记 
     *      为什么函数表达式可以被执行 而函数声明不可以
     *          函数声明会有编译器编译的过程，函数声明提升的过程 所以不可以立即执行
     *          函数表达式则会被编译不会提升，可以执行
     *      为什么代码被包含在一个立即执行函数内？
     *          可以避免全局变量污染，减少冲突。同ES6模块概念，只暴露出想暴露的需要的值
     *      如何区分函数声明和函数表达式？
     *          以function关键字开头的就是函数声明
     *          非function关键字开头就是函数表达式     
     *      为什么立即调用函数表达式必需要被()包起来？
     *          因为表达式声明的限制
     *              表达式规定不能以左大括号(})开始，因为不能跟代码块做区分
     *              表达式语句不能以function关键字开头 因为不能跟 函数声明做区分
     *          只有函数表达式可以被立即调用，函数声明不能被立即调用，所有我们想创建立即执行函数表达式的时候，如果解析器不能识别出来是函数表达式 我们使用分组操作符()来让他变成函数
     * 
     *      语句和表达式的区别？  
     *          表达式：js解释器会将其计算出一个结果，并且可以写在任何需要一个值的地方（相当于短语）
     *          语句： 用来执行使某件事发生（相当于句子）
     *          写语句的地方可以放表达式（表达式语句），反之放表达式的地方有可能不能放语句(参数放if语句)
     * 
     *                  
     *      函数声明
     *          必需有一个函数名 functionName
     *          函数声明（进入执行上下文的时候，会向当前执行环境的vo中保存函数声明，所有可以在函数声明之前执行函数）
     *          影响变量对象
     *          只可以在全局作用域 或者 函数内部声明一个函数
     * 
     *      函数表达式
     *          函数名可选择 functionName
     *          没有表达式提升 不影响变量对象 
     *          在代码执行阶段被创建
     * 
     *          函数表达式不会污染变量对象 不会变量声明提升
     * 
     *      函数表达式和函数声明最重要的区别就是名称标识符将会被绑定在何处
     *          函数声明 functionName 会被绑定在所在的作用域中
     *          函数表达式会 functionName会被绑定在函数表达式自身的函数中而不是作用域中
     * 
     *      如何区分函数声明和函表达式？
     *          看function关键字出现在声明中的位置（不仅仅是第一行，而是整个声明中的位置）。如果funciton关键字是声明中
     *          的第一个词，那么就是函数声明，否则就是函数表达式。
     *      匿名函数表达式缺点
     *          匿名函数在栈中不会显示有意义的函数名，使得调试很困难
     *          如果没有函数名，当函数需要引用自身 只能使用已经过期的arguemnt.callee引用。 递归 或者事件监听解绑
     *          匿名函数省略了函数名，正常函数名代表着可描述的名称，没有语意   
     *  
     *      名词解析
     *          语句 以分号结尾，如果省略分号，则由解析器确定语句的结尾
     * 
     * 
     *      tips 
     *          分组操作符 就是() 用来控制表达式的运算优先级 ()可以创建一个表达式
     *          
     *      
     * 
    **/

    /**
     *     
     *      函数表达式不会污染变量对象 不会变量声明提升
     *      
     *      分组操作符 可以创建函数表达式
     *      一元操作符也可以创建函数表达式
     * 
    **/
    (function() {});
    [function() {}];
    1, function() {};
    +function() {};
    !function(){};
    // 运行时有条件的创建一个函数表达式
    var bar = Math.random() > .5
            ? function() { return 1 }
            : function() { return 2 }


    // function(){} // 语法错误 解析器就认为这是一个函数声明 没有关键字 报错
    // function f() {}() // 语法错误 解析器会按照正常标准解析出一个函数声明 但是没有表达式的分组运算符 是错误的语法 所以报错原因是()没有值
    (function foo() {}) // 函数表达式 外部不能访问到foo
})();