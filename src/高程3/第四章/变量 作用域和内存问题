基本类型 和 引用类型
    基本类型  
        简单的数据段
        基本类型是按值访问的 可以操作保存在变量中的实际值
        基本类型值在内存中占据固定大小的空间 因此被保存在栈中
    引用类型  
        可能由多个值构成的对象
        引用类型的值是保存在内存中的对象 引用类型值是按照引用访问的
        引用类型的值保存在堆中

        动态属性
            引用类型可以追加属性 并且可以访问
                var person = new Object()
                person.name = 'lxk'
                alert(person.name)

            基本类型不能添加属性
                var name = 'lxk'
                name.firstName = 'l' // name被作为一个包装类定义一个firstname属性
                alert(name.firstName) // undefined 属性不见了

        复制变量值
            基本类型
                创建一个当前值的副本 赋值给当前变量
            引用类型
                创建一个当前引用的副本 赋值给当前变量

        传递参数
            函数的参数都是按值传递的 也就是说 函数外部的值复制给函数内部的参数 就和把值从一个变量复给另一个变量相同
            可以把参数想象成局部变量
        检测类型  
            instanceof
            result = variable instanceof constructor
            variable.__proto__  === constructor.prototype 即为相等

    执行环境及作用域
        词法作用域 词法分析时被定义的作用域
            欺骗词法作用域 eval with
        动态作用域 动态解析时候才确定作用域

        执行环境定义了函数/变量有权访问的其他数据 决定了他们的各自行为
        执行环境有个对应的变量对象 环境中定义的所有变量和函数都保存在这个对象中

        执行环境销毁 里面的变量也就都销毁了
        对于WEB浏览器来说 全局环境被认定为是 window对象 所以 浏览器关闭 变量被销毁

        函数有自己的执行环境（JS只有函数域 没有块级作用域）

        执行流程
            执行流进入到一个函数时 函数的环境就会被推入一个环境栈中 执行完毕 弹出

        代码在一个环境中执行的时候 创建一个作用域链

        作用域链作用
            保证对执行环境有权访问的所有变量和函数的有序访问

            作用域链本质 是一个指向变量象

            作用域链的顶端始终都是当前执行代码所在环境的变量对象 如果这个环境是函数 将其活动对象作为变量对象（活动对象最开始只有arguments）

        作用域解析
            就是沿着作用域链一级一级的搜索的标识符的过程

    垃圾收集
        标记清除 主流做法
        引用计数
            var a = 对象 这个对象引用次数加一
            a 指向别的对象 上一个对象引用次数减一

            bug
                循环引用
                var a = {}
                var b = {}
                a.someProps = b
                b.someProps = a
